/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  WedInvEvent as PrismaWedInvEvent,
  WedInv as PrismaWedInv,
} from "@prisma/client";

export class WedInvEventServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.WedInvEventCountArgs, "select">
  ): Promise<number> {
    return this.prisma.wedInvEvent.count(args);
  }

  async wedInvEvents<T extends Prisma.WedInvEventFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvEventFindManyArgs>
  ): Promise<PrismaWedInvEvent[]> {
    return this.prisma.wedInvEvent.findMany<Prisma.WedInvEventFindManyArgs>(
      args
    );
  }
  async wedInvEvent<T extends Prisma.WedInvEventFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvEventFindUniqueArgs>
  ): Promise<PrismaWedInvEvent | null> {
    return this.prisma.wedInvEvent.findUnique(args);
  }
  async createWedInvEvent<T extends Prisma.WedInvEventCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvEventCreateArgs>
  ): Promise<PrismaWedInvEvent> {
    return this.prisma.wedInvEvent.create<T>(args);
  }
  async updateWedInvEvent<T extends Prisma.WedInvEventUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvEventUpdateArgs>
  ): Promise<PrismaWedInvEvent> {
    return this.prisma.wedInvEvent.update<T>(args);
  }
  async deleteWedInvEvent<T extends Prisma.WedInvEventDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvEventDeleteArgs>
  ): Promise<PrismaWedInvEvent> {
    return this.prisma.wedInvEvent.delete(args);
  }

  async getWedInv(parentId: string): Promise<PrismaWedInv | null> {
    return this.prisma.wedInvEvent
      .findUnique({
        where: { id: parentId },
      })
      .wedInv();
  }
}
