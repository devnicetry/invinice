/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Public } from "../../decorators/public.decorator";
import { WedInvEvent } from "./WedInvEvent";
import { WedInvEventCountArgs } from "./WedInvEventCountArgs";
import { WedInvEventFindManyArgs } from "./WedInvEventFindManyArgs";
import { WedInvEventFindUniqueArgs } from "./WedInvEventFindUniqueArgs";
import { CreateWedInvEventArgs } from "./CreateWedInvEventArgs";
import { UpdateWedInvEventArgs } from "./UpdateWedInvEventArgs";
import { DeleteWedInvEventArgs } from "./DeleteWedInvEventArgs";
import { WedInv } from "../../wedInv/base/WedInv";
import { WedInvEventService } from "../wedInvEvent.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => WedInvEvent)
export class WedInvEventResolverBase {
  constructor(
    protected readonly service: WedInvEventService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "WedInvEvent",
    action: "read",
    possession: "any",
  })
  async _wedInvEventsMeta(
    @graphql.Args() args: WedInvEventCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [WedInvEvent])
  @nestAccessControl.UseRoles({
    resource: "WedInvEvent",
    action: "read",
    possession: "any",
  })
  async wedInvEvents(
    @graphql.Args() args: WedInvEventFindManyArgs
  ): Promise<WedInvEvent[]> {
    return this.service.wedInvEvents(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => WedInvEvent, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "WedInvEvent",
    action: "read",
    possession: "own",
  })
  async wedInvEvent(
    @graphql.Args() args: WedInvEventFindUniqueArgs
  ): Promise<WedInvEvent | null> {
    const result = await this.service.wedInvEvent(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => WedInvEvent)
  @nestAccessControl.UseRoles({
    resource: "WedInvEvent",
    action: "create",
    possession: "any",
  })
  async createWedInvEvent(
    @graphql.Args() args: CreateWedInvEventArgs
  ): Promise<WedInvEvent> {
    return await this.service.createWedInvEvent({
      ...args,
      data: {
        ...args.data,

        wedInv: args.data.wedInv
          ? {
              connect: args.data.wedInv,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => WedInvEvent)
  @nestAccessControl.UseRoles({
    resource: "WedInvEvent",
    action: "update",
    possession: "any",
  })
  async updateWedInvEvent(
    @graphql.Args() args: UpdateWedInvEventArgs
  ): Promise<WedInvEvent | null> {
    try {
      return await this.service.updateWedInvEvent({
        ...args,
        data: {
          ...args.data,

          wedInv: args.data.wedInv
            ? {
                connect: args.data.wedInv,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => WedInvEvent)
  @nestAccessControl.UseRoles({
    resource: "WedInvEvent",
    action: "delete",
    possession: "any",
  })
  async deleteWedInvEvent(
    @graphql.Args() args: DeleteWedInvEventArgs
  ): Promise<WedInvEvent | null> {
    try {
      return await this.service.deleteWedInvEvent(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @Public()
  @graphql.ResolveField(() => WedInv, {
    nullable: true,
    name: "wedInv",
  })
  async getWedInv(
    @graphql.Parent() parent: WedInvEvent
  ): Promise<WedInv | null> {
    const result = await this.service.getWedInv(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
