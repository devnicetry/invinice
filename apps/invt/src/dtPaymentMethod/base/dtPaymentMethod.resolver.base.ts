/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { GraphQLUpload } from "graphql-upload";
import { FileUpload } from "src/storage/base/storage.types";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { DtPaymentMethod } from "./DtPaymentMethod";
import { DtPaymentMethodCountArgs } from "./DtPaymentMethodCountArgs";
import { DtPaymentMethodFindManyArgs } from "./DtPaymentMethodFindManyArgs";
import { DtPaymentMethodFindUniqueArgs } from "./DtPaymentMethodFindUniqueArgs";
import { CreateDtPaymentMethodArgs } from "./CreateDtPaymentMethodArgs";
import { UpdateDtPaymentMethodArgs } from "./UpdateDtPaymentMethodArgs";
import { DeleteDtPaymentMethodArgs } from "./DeleteDtPaymentMethodArgs";
import { WedInvPaymentFindManyArgs } from "../../wedInvPayment/base/WedInvPaymentFindManyArgs";
import { WedInvPayment } from "../../wedInvPayment/base/WedInvPayment";
import { DtPaymentMethodService } from "../dtPaymentMethod.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => DtPaymentMethod)
export class DtPaymentMethodResolverBase {
  constructor(
    protected readonly service: DtPaymentMethodService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "DtPaymentMethod",
    action: "read",
    possession: "any",
  })
  async _dtPaymentMethodsMeta(
    @graphql.Args() args: DtPaymentMethodCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [DtPaymentMethod])
  @nestAccessControl.UseRoles({
    resource: "DtPaymentMethod",
    action: "read",
    possession: "any",
  })
  async dtPaymentMethods(
    @graphql.Args() args: DtPaymentMethodFindManyArgs
  ): Promise<DtPaymentMethod[]> {
    return this.service.dtPaymentMethods(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => DtPaymentMethod, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "DtPaymentMethod",
    action: "read",
    possession: "own",
  })
  async dtPaymentMethod(
    @graphql.Args() args: DtPaymentMethodFindUniqueArgs
  ): Promise<DtPaymentMethod | null> {
    const result = await this.service.dtPaymentMethod(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DtPaymentMethod)
  @nestAccessControl.UseRoles({
    resource: "DtPaymentMethod",
    action: "create",
    possession: "any",
  })
  async createDtPaymentMethod(
    @graphql.Args() args: CreateDtPaymentMethodArgs
  ): Promise<DtPaymentMethod> {
    return await this.service.createDtPaymentMethod({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DtPaymentMethod)
  @nestAccessControl.UseRoles({
    resource: "DtPaymentMethod",
    action: "update",
    possession: "any",
  })
  async updateDtPaymentMethod(
    @graphql.Args() args: UpdateDtPaymentMethodArgs
  ): Promise<DtPaymentMethod | null> {
    try {
      return await this.service.updateDtPaymentMethod({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DtPaymentMethod)
  @nestAccessControl.UseRoles({
    resource: "DtPaymentMethod",
    action: "delete",
    possession: "any",
  })
  async deleteDtPaymentMethod(
    @graphql.Args() args: DeleteDtPaymentMethodArgs
  ): Promise<DtPaymentMethod | null> {
    try {
      return await this.service.deleteDtPaymentMethod(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DtPaymentMethod)
  async uploadIcon(
    @graphql.Args({
      name: "file",
      type: () => GraphQLUpload,
    })
    file: FileUpload,
    @graphql.Args()
    args: DtPaymentMethodFindUniqueArgs
  ): Promise<DtPaymentMethod> {
    return await this.service.uploadIcon(args, file);
  }

  @graphql.Mutation(() => DtPaymentMethod)
  async deleteIcon(
    @graphql.Args()
    args: DtPaymentMethodFindUniqueArgs
  ): Promise<DtPaymentMethod> {
    return await this.service.deleteIcon(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [WedInvPayment], { name: "wedInvPayments" })
  @nestAccessControl.UseRoles({
    resource: "WedInvPayment",
    action: "read",
    possession: "any",
  })
  async findWedInvPayments(
    @graphql.Parent() parent: DtPaymentMethod,
    @graphql.Args() args: WedInvPaymentFindManyArgs
  ): Promise<WedInvPayment[]> {
    const results = await this.service.findWedInvPayments(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
