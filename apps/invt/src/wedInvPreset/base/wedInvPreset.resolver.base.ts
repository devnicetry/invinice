/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Public } from "../../decorators/public.decorator";
import { WedInvPreset } from "./WedInvPreset";
import { WedInvPresetCountArgs } from "./WedInvPresetCountArgs";
import { WedInvPresetFindManyArgs } from "./WedInvPresetFindManyArgs";
import { WedInvPresetFindUniqueArgs } from "./WedInvPresetFindUniqueArgs";
import { CreateWedInvPresetArgs } from "./CreateWedInvPresetArgs";
import { UpdateWedInvPresetArgs } from "./UpdateWedInvPresetArgs";
import { DeleteWedInvPresetArgs } from "./DeleteWedInvPresetArgs";
import { WedInv } from "../../wedInv/base/WedInv";
import { WedInvPresetService } from "../wedInvPreset.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => WedInvPreset)
export class WedInvPresetResolverBase {
  constructor(
    protected readonly service: WedInvPresetService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "WedInvPreset",
    action: "read",
    possession: "any",
  })
  async _wedInvPresetsMeta(
    @graphql.Args() args: WedInvPresetCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [WedInvPreset])
  @nestAccessControl.UseRoles({
    resource: "WedInvPreset",
    action: "read",
    possession: "any",
  })
  async wedInvPresets(
    @graphql.Args() args: WedInvPresetFindManyArgs
  ): Promise<WedInvPreset[]> {
    return this.service.wedInvPresets(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => WedInvPreset, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "WedInvPreset",
    action: "read",
    possession: "own",
  })
  async wedInvPreset(
    @graphql.Args() args: WedInvPresetFindUniqueArgs
  ): Promise<WedInvPreset | null> {
    const result = await this.service.wedInvPreset(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => WedInvPreset)
  @nestAccessControl.UseRoles({
    resource: "WedInvPreset",
    action: "create",
    possession: "any",
  })
  async createWedInvPreset(
    @graphql.Args() args: CreateWedInvPresetArgs
  ): Promise<WedInvPreset> {
    return await this.service.createWedInvPreset({
      ...args,
      data: {
        ...args.data,

        wedInv: args.data.wedInv
          ? {
              connect: args.data.wedInv,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => WedInvPreset)
  @nestAccessControl.UseRoles({
    resource: "WedInvPreset",
    action: "update",
    possession: "any",
  })
  async updateWedInvPreset(
    @graphql.Args() args: UpdateWedInvPresetArgs
  ): Promise<WedInvPreset | null> {
    try {
      return await this.service.updateWedInvPreset({
        ...args,
        data: {
          ...args.data,

          wedInv: args.data.wedInv
            ? {
                connect: args.data.wedInv,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => WedInvPreset)
  @nestAccessControl.UseRoles({
    resource: "WedInvPreset",
    action: "delete",
    possession: "any",
  })
  async deleteWedInvPreset(
    @graphql.Args() args: DeleteWedInvPresetArgs
  ): Promise<WedInvPreset | null> {
    try {
      return await this.service.deleteWedInvPreset(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @Public()
  @graphql.ResolveField(() => WedInv, {
    nullable: true,
    name: "wedInv",
  })
  async getWedInv(
    @graphql.Parent() parent: WedInvPreset
  ): Promise<WedInv | null> {
    const result = await this.service.getWedInv(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
