/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  WedInvPreset as PrismaWedInvPreset,
  WedInv as PrismaWedInv,
} from "@prisma/client";

export class WedInvPresetServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.WedInvPresetCountArgs, "select">
  ): Promise<number> {
    return this.prisma.wedInvPreset.count(args);
  }

  async wedInvPresets<T extends Prisma.WedInvPresetFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvPresetFindManyArgs>
  ): Promise<PrismaWedInvPreset[]> {
    return this.prisma.wedInvPreset.findMany<Prisma.WedInvPresetFindManyArgs>(
      args
    );
  }
  async wedInvPreset<T extends Prisma.WedInvPresetFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvPresetFindUniqueArgs>
  ): Promise<PrismaWedInvPreset | null> {
    return this.prisma.wedInvPreset.findUnique(args);
  }
  async createWedInvPreset<T extends Prisma.WedInvPresetCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvPresetCreateArgs>
  ): Promise<PrismaWedInvPreset> {
    return this.prisma.wedInvPreset.create<T>(args);
  }
  async updateWedInvPreset<T extends Prisma.WedInvPresetUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvPresetUpdateArgs>
  ): Promise<PrismaWedInvPreset> {
    return this.prisma.wedInvPreset.update<T>(args);
  }
  async deleteWedInvPreset<T extends Prisma.WedInvPresetDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvPresetDeleteArgs>
  ): Promise<PrismaWedInvPreset> {
    return this.prisma.wedInvPreset.delete(args);
  }

  async getWedInv(parentId: string): Promise<PrismaWedInv | null> {
    return this.prisma.wedInvPreset
      .findUnique({
        where: { id: parentId },
      })
      .wedInv();
  }
}
