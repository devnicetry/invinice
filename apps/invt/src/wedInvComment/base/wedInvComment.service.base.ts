/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  WedInvComment as PrismaWedInvComment,
  WedInv as PrismaWedInv,
  WedInvShare as PrismaWedInvShare,
} from "@prisma/client";

import { LocalStorageService } from "src/storage/providers/local/local.storage.service";
import { InputJsonValue } from "src/types";
import { FileDownload, FileUpload } from "src/storage/base/storage.types";
import { LocalStorageFile } from "src/storage/providers/local/local.storage.types";

export class WedInvCommentServiceBase {
  constructor(
    protected readonly prisma: PrismaService,
    protected readonly localStorageService: LocalStorageService
  ) {}

  async count(
    args: Omit<Prisma.WedInvCommentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.wedInvComment.count(args);
  }

  async wedInvComments<T extends Prisma.WedInvCommentFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvCommentFindManyArgs>
  ): Promise<PrismaWedInvComment[]> {
    return this.prisma.wedInvComment.findMany<Prisma.WedInvCommentFindManyArgs>(
      args
    );
  }
  async wedInvComment<T extends Prisma.WedInvCommentFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvCommentFindUniqueArgs>
  ): Promise<PrismaWedInvComment | null> {
    return this.prisma.wedInvComment.findUnique(args);
  }
  async createWedInvComment<T extends Prisma.WedInvCommentCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvCommentCreateArgs>
  ): Promise<PrismaWedInvComment> {
    return this.prisma.wedInvComment.create<T>(args);
  }
  async updateWedInvComment<T extends Prisma.WedInvCommentUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvCommentUpdateArgs>
  ): Promise<PrismaWedInvComment> {
    return this.prisma.wedInvComment.update<T>(args);
  }
  async deleteWedInvComment<T extends Prisma.WedInvCommentDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvCommentDeleteArgs>
  ): Promise<PrismaWedInvComment> {
    return this.prisma.wedInvComment.delete(args);
  }

  async uploadMoment<T extends Prisma.WedInvCommentFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvCommentFindUniqueArgs>,
    file: FileUpload
  ): Promise<PrismaWedInvComment> {
    file.filename = `profilePicture-${args.where.id}.${file.filename
      .split(".")
      .pop()}`;
    const containerPath = "/Wed Inv/Comments/";
    const moment = await this.localStorageService.uploadFile(
      file,
      [],
      10000000,
      containerPath
    );

    return await this.prisma.wedInvComment.update({
      where: args.where,

      data: {
        moment: moment as InputJsonValue,
      },
    });
  }

  async downloadMoment<T extends Prisma.WedInvCommentFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvCommentFindUniqueArgs>
  ): Promise<FileDownload> {
    const { moment } = await this.prisma.wedInvComment.findUniqueOrThrow({
      where: args.where,
    });

    return await this.localStorageService.downloadFile(
      moment as unknown as LocalStorageFile
    );
  }

  async deleteMoment<T extends Prisma.WedInvCommentFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvCommentFindUniqueArgs>
  ): Promise<PrismaWedInvComment> {
    const { moment } = await this.prisma.wedInvComment.findUniqueOrThrow({
      where: args.where,
    });

    await this.localStorageService.deleteFile(
      moment as unknown as LocalStorageFile
    );

    return await this.prisma.wedInvComment.update({
      where: args.where,

      data: {
        moment: Prisma.DbNull,
      },
    });
  }

  async getWedInv(parentId: string): Promise<PrismaWedInv | null> {
    return this.prisma.wedInvComment
      .findUnique({
        where: { id: parentId },
      })
      .wedInv();
  }

  async getWedInvShare(parentId: string): Promise<PrismaWedInvShare | null> {
    return this.prisma.wedInvComment
      .findUnique({
        where: { id: parentId },
      })
      .wedInvShare();
  }
}
