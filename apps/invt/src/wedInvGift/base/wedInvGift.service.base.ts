/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  WedInvGift as PrismaWedInvGift,
  DtGift as PrismaDtGift,
  WedInv as PrismaWedInv,
} from "@prisma/client";

import { LocalStorageService } from "src/storage/providers/local/local.storage.service";
import { InputJsonValue } from "src/types";
import { FileDownload, FileUpload } from "src/storage/base/storage.types";
import { LocalStorageFile } from "src/storage/providers/local/local.storage.types";

export class WedInvGiftServiceBase {
  constructor(
    protected readonly prisma: PrismaService,
    protected readonly localStorageService: LocalStorageService
  ) {}

  async count(
    args: Omit<Prisma.WedInvGiftCountArgs, "select">
  ): Promise<number> {
    return this.prisma.wedInvGift.count(args);
  }

  async wedInvGifts<T extends Prisma.WedInvGiftFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvGiftFindManyArgs>
  ): Promise<PrismaWedInvGift[]> {
    return this.prisma.wedInvGift.findMany<Prisma.WedInvGiftFindManyArgs>(args);
  }
  async wedInvGift<T extends Prisma.WedInvGiftFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvGiftFindUniqueArgs>
  ): Promise<PrismaWedInvGift | null> {
    return this.prisma.wedInvGift.findUnique(args);
  }
  async createWedInvGift<T extends Prisma.WedInvGiftCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvGiftCreateArgs>
  ): Promise<PrismaWedInvGift> {
    return this.prisma.wedInvGift.create<T>(args);
  }
  async updateWedInvGift<T extends Prisma.WedInvGiftUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvGiftUpdateArgs>
  ): Promise<PrismaWedInvGift> {
    return this.prisma.wedInvGift.update<T>(args);
  }
  async deleteWedInvGift<T extends Prisma.WedInvGiftDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvGiftDeleteArgs>
  ): Promise<PrismaWedInvGift> {
    return this.prisma.wedInvGift.delete(args);
  }

  async uploadAccountPhoto<T extends Prisma.WedInvGiftFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvGiftFindUniqueArgs>,
    file: FileUpload
  ): Promise<PrismaWedInvGift> {
    file.filename = `profilePicture-${args.where.id}.${file.filename
      .split(".")
      .pop()}`;
    const containerPath = "/Wed Inv/Gifts/";
    const accountPhoto = await this.localStorageService.uploadFile(
      file,
      [],
      10000000,
      containerPath
    );

    return await this.prisma.wedInvGift.update({
      where: args.where,

      data: {
        accountPhoto: accountPhoto as InputJsonValue,
      },
    });
  }

  async downloadAccountPhoto<T extends Prisma.WedInvGiftFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvGiftFindUniqueArgs>
  ): Promise<FileDownload> {
    const { accountPhoto } = await this.prisma.wedInvGift.findUniqueOrThrow({
      where: args.where,
    });

    return await this.localStorageService.downloadFile(
      accountPhoto as unknown as LocalStorageFile
    );
  }

  async deleteAccountPhoto<T extends Prisma.WedInvGiftFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvGiftFindUniqueArgs>
  ): Promise<PrismaWedInvGift> {
    const { accountPhoto } = await this.prisma.wedInvGift.findUniqueOrThrow({
      where: args.where,
    });

    await this.localStorageService.deleteFile(
      accountPhoto as unknown as LocalStorageFile
    );

    return await this.prisma.wedInvGift.update({
      where: args.where,

      data: {
        accountPhoto: Prisma.DbNull,
      },
    });
  }

  async getDtGift(parentId: string): Promise<PrismaDtGift | null> {
    return this.prisma.wedInvGift
      .findUnique({
        where: { id: parentId },
      })
      .dtGift();
  }

  async getWedInv(parentId: string): Promise<PrismaWedInv | null> {
    return this.prisma.wedInvGift
      .findUnique({
        where: { id: parentId },
      })
      .wedInv();
  }
}
