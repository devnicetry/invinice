/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  WedInvStory as PrismaWedInvStory,
  WedInv as PrismaWedInv,
} from "@prisma/client";
import { LocalStorageService } from "src/storage/providers/local/local.storage.service";
import { InputJsonValue } from "src/types";
import { FileDownload, FileUpload } from "src/storage/base/storage.types";
import { LocalStorageFile } from "src/storage/providers/local/local.storage.types";

export class WedInvStoryServiceBase {
  constructor(
    protected readonly prisma: PrismaService,
    protected readonly localStorageService: LocalStorageService
  ) {}

  async count(
    args: Omit<Prisma.WedInvStoryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.wedInvStory.count(args);
  }

  async wedInvStories<T extends Prisma.WedInvStoryFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvStoryFindManyArgs>
  ): Promise<PrismaWedInvStory[]> {
    return this.prisma.wedInvStory.findMany<Prisma.WedInvStoryFindManyArgs>(
      args
    );
  }
  async wedInvStory<T extends Prisma.WedInvStoryFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvStoryFindUniqueArgs>
  ): Promise<PrismaWedInvStory | null> {
    return this.prisma.wedInvStory.findUnique(args);
  }
  async createWedInvStory<T extends Prisma.WedInvStoryCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvStoryCreateArgs>
  ): Promise<PrismaWedInvStory> {
    return this.prisma.wedInvStory.create<T>(args);
  }
  async updateWedInvStory<T extends Prisma.WedInvStoryUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvStoryUpdateArgs>
  ): Promise<PrismaWedInvStory> {
    return this.prisma.wedInvStory.update<T>(args);
  }
  async deleteWedInvStory<T extends Prisma.WedInvStoryDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvStoryDeleteArgs>
  ): Promise<PrismaWedInvStory> {
    return this.prisma.wedInvStory.delete(args);
  }

  async uploadPhoto<T extends Prisma.WedInvStoryFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvStoryFindUniqueArgs>,
    file: FileUpload
  ): Promise<PrismaWedInvStory> {
    file.filename = `profilePicture-${args.where.id}.${file.filename
      .split(".")
      .pop()}`;
    const containerPath = "/Wed Inv/Stories/";
    const photo = await this.localStorageService.uploadFile(
      file,
      [],
      10000000,
      containerPath
    );

    return await this.prisma.wedInvStory.update({
      where: args.where,

      data: {
        photo: photo as InputJsonValue,
      },
    });
  }

  async downloadPhoto<T extends Prisma.WedInvStoryFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvStoryFindUniqueArgs>
  ): Promise<FileDownload> {
    const { photo } = await this.prisma.wedInvStory.findUniqueOrThrow({
      where: args.where,
    });

    return await this.localStorageService.downloadFile(
      photo as unknown as LocalStorageFile
    );
  }

  async deletePhoto<T extends Prisma.WedInvStoryFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvStoryFindUniqueArgs>
  ): Promise<PrismaWedInvStory> {
    const { photo } = await this.prisma.wedInvStory.findUniqueOrThrow({
      where: args.where,
    });

    await this.localStorageService.deleteFile(
      photo as unknown as LocalStorageFile
    );

    return await this.prisma.wedInvStory.update({
      where: args.where,

      data: {
        photo: Prisma.DbNull,
      },
    });
  }

  async getWedInv(parentId: string): Promise<PrismaWedInv | null> {
    return this.prisma.wedInvStory
      .findUnique({
        where: { id: parentId },
      })
      .wedInv();
  }
}
