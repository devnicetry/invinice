/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { GraphQLUpload } from "graphql-upload";
import { FileUpload } from "src/storage/base/storage.types";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Public } from "../../decorators/public.decorator";
import { WedInvStory } from "./WedInvStory";
import { WedInvStoryCountArgs } from "./WedInvStoryCountArgs";
import { WedInvStoryFindManyArgs } from "./WedInvStoryFindManyArgs";
import { WedInvStoryFindUniqueArgs } from "./WedInvStoryFindUniqueArgs";
import { CreateWedInvStoryArgs } from "./CreateWedInvStoryArgs";
import { UpdateWedInvStoryArgs } from "./UpdateWedInvStoryArgs";
import { DeleteWedInvStoryArgs } from "./DeleteWedInvStoryArgs";
import { WedInv } from "../../wedInv/base/WedInv";
import { WedInvStoryService } from "../wedInvStory.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => WedInvStory)
export class WedInvStoryResolverBase {
  constructor(
    protected readonly service: WedInvStoryService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "WedInvStory",
    action: "read",
    possession: "any",
  })
  async _wedInvStoriesMeta(
    @graphql.Args() args: WedInvStoryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [WedInvStory])
  @nestAccessControl.UseRoles({
    resource: "WedInvStory",
    action: "read",
    possession: "any",
  })
  async wedInvStories(
    @graphql.Args() args: WedInvStoryFindManyArgs
  ): Promise<WedInvStory[]> {
    return this.service.wedInvStories(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => WedInvStory, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "WedInvStory",
    action: "read",
    possession: "own",
  })
  async wedInvStory(
    @graphql.Args() args: WedInvStoryFindUniqueArgs
  ): Promise<WedInvStory | null> {
    const result = await this.service.wedInvStory(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => WedInvStory)
  @nestAccessControl.UseRoles({
    resource: "WedInvStory",
    action: "create",
    possession: "any",
  })
  async createWedInvStory(
    @graphql.Args() args: CreateWedInvStoryArgs
  ): Promise<WedInvStory> {
    return await this.service.createWedInvStory({
      ...args,
      data: {
        ...args.data,

        wedInv: args.data.wedInv
          ? {
              connect: args.data.wedInv,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => WedInvStory)
  @nestAccessControl.UseRoles({
    resource: "WedInvStory",
    action: "update",
    possession: "any",
  })
  async updateWedInvStory(
    @graphql.Args() args: UpdateWedInvStoryArgs
  ): Promise<WedInvStory | null> {
    try {
      return await this.service.updateWedInvStory({
        ...args,
        data: {
          ...args.data,

          wedInv: args.data.wedInv
            ? {
                connect: args.data.wedInv,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => WedInvStory)
  @nestAccessControl.UseRoles({
    resource: "WedInvStory",
    action: "delete",
    possession: "any",
  })
  async deleteWedInvStory(
    @graphql.Args() args: DeleteWedInvStoryArgs
  ): Promise<WedInvStory | null> {
    try {
      return await this.service.deleteWedInvStory(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => WedInvStory)
  async uploadPhoto(
    @graphql.Args({
      name: "file",
      type: () => GraphQLUpload,
    })
    file: FileUpload,
    @graphql.Args()
    args: WedInvStoryFindUniqueArgs
  ): Promise<WedInvStory> {
    return await this.service.uploadPhoto(args, file);
  }

  @graphql.Mutation(() => WedInvStory)
  async deletePhoto(
    @graphql.Args()
    args: WedInvStoryFindUniqueArgs
  ): Promise<WedInvStory> {
    return await this.service.deletePhoto(args);
  }

  @Public()
  @graphql.ResolveField(() => WedInv, {
    nullable: true,
    name: "wedInv",
  })
  async getWedInv(
    @graphql.Parent() parent: WedInvStory
  ): Promise<WedInv | null> {
    const result = await this.service.getWedInv(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
