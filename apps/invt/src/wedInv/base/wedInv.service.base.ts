/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  WedInv as PrismaWedInv,
  WedInvComment as PrismaWedInvComment,
  WedInvEvent as PrismaWedInvEvent,
  WedInvGallery as PrismaWedInvGallery,
  WedInvGift as PrismaWedInvGift,
  WedInvPayment as PrismaWedInvPayment,
  WedInvPreset as PrismaWedInvPreset,
  WedInvShare as PrismaWedInvShare,
  WedInvStory as PrismaWedInvStory,
  WedInvVideo as PrismaWedInvVideo,
  WedInvWedding as PrismaWedInvWedding,
  User as PrismaUser,
} from "@prisma/client";

export class WedInvServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.WedInvCountArgs, "select">): Promise<number> {
    return this.prisma.wedInv.count(args);
  }

  async wedInvs<T extends Prisma.WedInvFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvFindManyArgs>
  ): Promise<PrismaWedInv[]> {
    return this.prisma.wedInv.findMany<Prisma.WedInvFindManyArgs>(args);
  }
  async wedInv<T extends Prisma.WedInvFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvFindUniqueArgs>
  ): Promise<PrismaWedInv | null> {
    return this.prisma.wedInv.findUnique(args);
  }
  async createWedInv<T extends Prisma.WedInvCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvCreateArgs>
  ): Promise<PrismaWedInv> {
    return this.prisma.wedInv.create<T>(args);
  }
  async updateWedInv<T extends Prisma.WedInvUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvUpdateArgs>
  ): Promise<PrismaWedInv> {
    return this.prisma.wedInv.update<T>(args);
  }
  async deleteWedInv<T extends Prisma.WedInvDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvDeleteArgs>
  ): Promise<PrismaWedInv> {
    return this.prisma.wedInv.delete(args);
  }

  async findWedInvComments(
    parentId: string,
    args: Prisma.WedInvCommentFindManyArgs
  ): Promise<PrismaWedInvComment[]> {
    return this.prisma.wedInv
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .wedInvComments(args);
  }

  async findWedInvEvents(
    parentId: string,
    args: Prisma.WedInvEventFindManyArgs
  ): Promise<PrismaWedInvEvent[]> {
    return this.prisma.wedInv
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .wedInvEvents(args);
  }

  async findWedInvGalleries(
    parentId: string,
    args: Prisma.WedInvGalleryFindManyArgs
  ): Promise<PrismaWedInvGallery[]> {
    return this.prisma.wedInv
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .wedInvGalleries(args);
  }

  async findWedInvGifts(
    parentId: string,
    args: Prisma.WedInvGiftFindManyArgs
  ): Promise<PrismaWedInvGift[]> {
    return this.prisma.wedInv
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .wedInvGifts(args);
  }

  async findWedInvPayments(
    parentId: string,
    args: Prisma.WedInvPaymentFindManyArgs
  ): Promise<PrismaWedInvPayment[]> {
    return this.prisma.wedInv
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .wedInvPayments(args);
  }

  async findWedInvPresets(
    parentId: string,
    args: Prisma.WedInvPresetFindManyArgs
  ): Promise<PrismaWedInvPreset[]> {
    return this.prisma.wedInv
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .wedInvPresets(args);
  }

  async findWedInvShares(
    parentId: string,
    args: Prisma.WedInvShareFindManyArgs
  ): Promise<PrismaWedInvShare[]> {
    return this.prisma.wedInv
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .wedInvShares(args);
  }

  async findWedInvStories(
    parentId: string,
    args: Prisma.WedInvStoryFindManyArgs
  ): Promise<PrismaWedInvStory[]> {
    return this.prisma.wedInv
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .wedInvStories(args);
  }

  async findWedInvVideos(
    parentId: string,
    args: Prisma.WedInvVideoFindManyArgs
  ): Promise<PrismaWedInvVideo[]> {
    return this.prisma.wedInv
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .wedInvVideos(args);
  }

  async findWedInvWeddings(
    parentId: string,
    args: Prisma.WedInvWeddingFindManyArgs
  ): Promise<PrismaWedInvWedding[]> {
    return this.prisma.wedInv
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .wedInvWeddings(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.wedInv
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
