/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { Public } from "../../decorators/public.decorator";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { WedInv } from "./WedInv";
import { WedInvCountArgs } from "./WedInvCountArgs";
import { WedInvFindManyArgs } from "./WedInvFindManyArgs";
import { WedInvFindUniqueArgs } from "./WedInvFindUniqueArgs";
import { CreateWedInvArgs } from "./CreateWedInvArgs";
import { UpdateWedInvArgs } from "./UpdateWedInvArgs";
import { DeleteWedInvArgs } from "./DeleteWedInvArgs";
import { WedInvCommentFindManyArgs } from "../../wedInvComment/base/WedInvCommentFindManyArgs";
import { WedInvComment } from "../../wedInvComment/base/WedInvComment";
import { WedInvEventFindManyArgs } from "../../wedInvEvent/base/WedInvEventFindManyArgs";
import { WedInvEvent } from "../../wedInvEvent/base/WedInvEvent";
import { WedInvGalleryFindManyArgs } from "../../wedInvGallery/base/WedInvGalleryFindManyArgs";
import { WedInvGallery } from "../../wedInvGallery/base/WedInvGallery";
import { WedInvGiftFindManyArgs } from "../../wedInvGift/base/WedInvGiftFindManyArgs";
import { WedInvGift } from "../../wedInvGift/base/WedInvGift";
import { WedInvPaymentFindManyArgs } from "../../wedInvPayment/base/WedInvPaymentFindManyArgs";
import { WedInvPayment } from "../../wedInvPayment/base/WedInvPayment";
import { WedInvPresetFindManyArgs } from "../../wedInvPreset/base/WedInvPresetFindManyArgs";
import { WedInvPreset } from "../../wedInvPreset/base/WedInvPreset";
import { WedInvShareFindManyArgs } from "../../wedInvShare/base/WedInvShareFindManyArgs";
import { WedInvShare } from "../../wedInvShare/base/WedInvShare";
import { WedInvStoryFindManyArgs } from "../../wedInvStory/base/WedInvStoryFindManyArgs";
import { WedInvStory } from "../../wedInvStory/base/WedInvStory";
import { WedInvVideoFindManyArgs } from "../../wedInvVideo/base/WedInvVideoFindManyArgs";
import { WedInvVideo } from "../../wedInvVideo/base/WedInvVideo";
import { WedInvWeddingFindManyArgs } from "../../wedInvWedding/base/WedInvWeddingFindManyArgs";
import { WedInvWedding } from "../../wedInvWedding/base/WedInvWedding";
import { User } from "../../user/base/User";
import { WedInvService } from "../wedInv.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => WedInv)
export class WedInvResolverBase {
  constructor(
    protected readonly service: WedInvService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "WedInv",
    action: "read",
    possession: "any",
  })
  async _wedInvsMeta(
    @graphql.Args() args: WedInvCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [WedInv])
  @nestAccessControl.UseRoles({
    resource: "WedInv",
    action: "read",
    possession: "any",
  })
  async wedInvs(@graphql.Args() args: WedInvFindManyArgs): Promise<WedInv[]> {
    return this.service.wedInvs(args);
  }

  @Public()
  @graphql.Query(() => WedInv, { nullable: true })
  async wedInv(
    @graphql.Args() args: WedInvFindUniqueArgs
  ): Promise<WedInv | null> {
    const result = await this.service.wedInv(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => WedInv)
  @nestAccessControl.UseRoles({
    resource: "WedInv",
    action: "create",
    possession: "any",
  })
  async createWedInv(@graphql.Args() args: CreateWedInvArgs): Promise<WedInv> {
    return await this.service.createWedInv({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => WedInv)
  @nestAccessControl.UseRoles({
    resource: "WedInv",
    action: "update",
    possession: "any",
  })
  async updateWedInv(
    @graphql.Args() args: UpdateWedInvArgs
  ): Promise<WedInv | null> {
    try {
      return await this.service.updateWedInv({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => WedInv)
  @nestAccessControl.UseRoles({
    resource: "WedInv",
    action: "delete",
    possession: "any",
  })
  async deleteWedInv(
    @graphql.Args() args: DeleteWedInvArgs
  ): Promise<WedInv | null> {
    try {
      return await this.service.deleteWedInv(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [WedInvComment], { name: "wedInvComments" })
  @nestAccessControl.UseRoles({
    resource: "WedInvComment",
    action: "read",
    possession: "any",
  })
  async findWedInvComments(
    @graphql.Parent() parent: WedInv,
    @graphql.Args() args: WedInvCommentFindManyArgs
  ): Promise<WedInvComment[]> {
    const results = await this.service.findWedInvComments(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [WedInvEvent], { name: "wedInvEvents" })
  @nestAccessControl.UseRoles({
    resource: "WedInvEvent",
    action: "read",
    possession: "any",
  })
  async findWedInvEvents(
    @graphql.Parent() parent: WedInv,
    @graphql.Args() args: WedInvEventFindManyArgs
  ): Promise<WedInvEvent[]> {
    const results = await this.service.findWedInvEvents(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [WedInvGallery], { name: "wedInvGalleries" })
  @nestAccessControl.UseRoles({
    resource: "WedInvGallery",
    action: "read",
    possession: "any",
  })
  async findWedInvGalleries(
    @graphql.Parent() parent: WedInv,
    @graphql.Args() args: WedInvGalleryFindManyArgs
  ): Promise<WedInvGallery[]> {
    const results = await this.service.findWedInvGalleries(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [WedInvGift], { name: "wedInvGifts" })
  @nestAccessControl.UseRoles({
    resource: "WedInvGift",
    action: "read",
    possession: "any",
  })
  async findWedInvGifts(
    @graphql.Parent() parent: WedInv,
    @graphql.Args() args: WedInvGiftFindManyArgs
  ): Promise<WedInvGift[]> {
    const results = await this.service.findWedInvGifts(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [WedInvPayment], { name: "wedInvPayments" })
  @nestAccessControl.UseRoles({
    resource: "WedInvPayment",
    action: "read",
    possession: "any",
  })
  async findWedInvPayments(
    @graphql.Parent() parent: WedInv,
    @graphql.Args() args: WedInvPaymentFindManyArgs
  ): Promise<WedInvPayment[]> {
    const results = await this.service.findWedInvPayments(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [WedInvPreset], { name: "wedInvPresets" })
  @nestAccessControl.UseRoles({
    resource: "WedInvPreset",
    action: "read",
    possession: "any",
  })
  async findWedInvPresets(
    @graphql.Parent() parent: WedInv,
    @graphql.Args() args: WedInvPresetFindManyArgs
  ): Promise<WedInvPreset[]> {
    const results = await this.service.findWedInvPresets(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [WedInvShare], { name: "wedInvShares" })
  @nestAccessControl.UseRoles({
    resource: "WedInvShare",
    action: "read",
    possession: "any",
  })
  async findWedInvShares(
    @graphql.Parent() parent: WedInv,
    @graphql.Args() args: WedInvShareFindManyArgs
  ): Promise<WedInvShare[]> {
    const results = await this.service.findWedInvShares(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [WedInvStory], { name: "wedInvStories" })
  @nestAccessControl.UseRoles({
    resource: "WedInvStory",
    action: "read",
    possession: "any",
  })
  async findWedInvStories(
    @graphql.Parent() parent: WedInv,
    @graphql.Args() args: WedInvStoryFindManyArgs
  ): Promise<WedInvStory[]> {
    const results = await this.service.findWedInvStories(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [WedInvVideo], { name: "wedInvVideos" })
  @nestAccessControl.UseRoles({
    resource: "WedInvVideo",
    action: "read",
    possession: "any",
  })
  async findWedInvVideos(
    @graphql.Parent() parent: WedInv,
    @graphql.Args() args: WedInvVideoFindManyArgs
  ): Promise<WedInvVideo[]> {
    const results = await this.service.findWedInvVideos(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [WedInvWedding], { name: "wedInvWeddings" })
  @nestAccessControl.UseRoles({
    resource: "WedInvWedding",
    action: "read",
    possession: "any",
  })
  async findWedInvWeddings(
    @graphql.Parent() parent: WedInv,
    @graphql.Args() args: WedInvWeddingFindManyArgs
  ): Promise<WedInvWedding[]> {
    const results = await this.service.findWedInvWeddings(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: WedInv): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
