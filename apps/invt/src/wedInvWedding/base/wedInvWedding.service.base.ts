/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  WedInvWedding as PrismaWedInvWedding,
  WedInv as PrismaWedInv,
} from "@prisma/client";
import { LocalStorageService } from "src/storage/providers/local/local.storage.service";
import { InputJsonValue } from "src/types";
import { FileDownload, FileUpload } from "src/storage/base/storage.types";
import { LocalStorageFile } from "src/storage/providers/local/local.storage.types";

export class WedInvWeddingServiceBase {
  constructor(
    protected readonly prisma: PrismaService,
    protected readonly localStorageService: LocalStorageService
  ) {}

  async count(
    args: Omit<Prisma.WedInvWeddingCountArgs, "select">
  ): Promise<number> {
    return this.prisma.wedInvWedding.count(args);
  }

  async wedInvWeddings<T extends Prisma.WedInvWeddingFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvWeddingFindManyArgs>
  ): Promise<PrismaWedInvWedding[]> {
    return this.prisma.wedInvWedding.findMany<Prisma.WedInvWeddingFindManyArgs>(
      args
    );
  }
  async wedInvWedding<T extends Prisma.WedInvWeddingFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvWeddingFindUniqueArgs>
  ): Promise<PrismaWedInvWedding | null> {
    return this.prisma.wedInvWedding.findUnique(args);
  }
  async createWedInvWedding<T extends Prisma.WedInvWeddingCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvWeddingCreateArgs>
  ): Promise<PrismaWedInvWedding> {
    return this.prisma.wedInvWedding.create<T>(args);
  }
  async updateWedInvWedding<T extends Prisma.WedInvWeddingUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvWeddingUpdateArgs>
  ): Promise<PrismaWedInvWedding> {
    return this.prisma.wedInvWedding.update<T>(args);
  }
  async deleteWedInvWedding<T extends Prisma.WedInvWeddingDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvWeddingDeleteArgs>
  ): Promise<PrismaWedInvWedding> {
    return this.prisma.wedInvWedding.delete(args);
  }

  async uploadPhoto<T extends Prisma.WedInvWeddingFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvWeddingFindUniqueArgs>,
    file: FileUpload
  ): Promise<PrismaWedInvWedding> {
    file.filename = `profilePicture-${args.where.id}.${file.filename
      .split(".")
      .pop()}`;
    const containerPath = "/Wed Inv/Weddings/";
    const photo = await this.localStorageService.uploadFile(
      file,
      [],
      10000000,
      containerPath
    );

    return await this.prisma.wedInvWedding.update({
      where: args.where,

      data: {
        photo: photo as InputJsonValue,
      },
    });
  }

  async downloadPhoto<T extends Prisma.WedInvWeddingFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvWeddingFindUniqueArgs>
  ): Promise<FileDownload> {
    const { photo } = await this.prisma.wedInvWedding.findUniqueOrThrow({
      where: args.where,
    });

    return await this.localStorageService.downloadFile(
      photo as unknown as LocalStorageFile
    );
  }

  async deletePhoto<T extends Prisma.WedInvWeddingFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvWeddingFindUniqueArgs>
  ): Promise<PrismaWedInvWedding> {
    const { photo } = await this.prisma.wedInvWedding.findUniqueOrThrow({
      where: args.where,
    });

    await this.localStorageService.deleteFile(
      photo as unknown as LocalStorageFile
    );

    return await this.prisma.wedInvWedding.update({
      where: args.where,

      data: {
        photo: Prisma.DbNull,
      },
    });
  }

  async getWedInv(parentId: string): Promise<PrismaWedInv | null> {
    return this.prisma.wedInvWedding
      .findUnique({
        where: { id: parentId },
      })
      .wedInv();
  }
}
