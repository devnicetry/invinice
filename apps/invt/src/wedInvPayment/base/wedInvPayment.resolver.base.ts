/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { GraphQLUpload } from "graphql-upload";
import { FileUpload } from "src/storage/base/storage.types";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Public } from "../../decorators/public.decorator";
import { WedInvPayment } from "./WedInvPayment";
import { WedInvPaymentCountArgs } from "./WedInvPaymentCountArgs";
import { WedInvPaymentFindManyArgs } from "./WedInvPaymentFindManyArgs";
import { WedInvPaymentFindUniqueArgs } from "./WedInvPaymentFindUniqueArgs";
import { CreateWedInvPaymentArgs } from "./CreateWedInvPaymentArgs";
import { UpdateWedInvPaymentArgs } from "./UpdateWedInvPaymentArgs";
import { DeleteWedInvPaymentArgs } from "./DeleteWedInvPaymentArgs";
import { DtPaymentMethod } from "../../dtPaymentMethod/base/DtPaymentMethod";
import { User } from "../../user/base/User";
import { WedInv } from "../../wedInv/base/WedInv";
import { WedInvPaymentService } from "../wedInvPayment.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => WedInvPayment)
export class WedInvPaymentResolverBase {
  constructor(
    protected readonly service: WedInvPaymentService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "WedInvPayment",
    action: "read",
    possession: "any",
  })
  async _wedInvPaymentsMeta(
    @graphql.Args() args: WedInvPaymentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [WedInvPayment])
  @nestAccessControl.UseRoles({
    resource: "WedInvPayment",
    action: "read",
    possession: "any",
  })
  async wedInvPayments(
    @graphql.Args() args: WedInvPaymentFindManyArgs
  ): Promise<WedInvPayment[]> {
    return this.service.wedInvPayments(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => WedInvPayment, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "WedInvPayment",
    action: "read",
    possession: "own",
  })
  async wedInvPayment(
    @graphql.Args() args: WedInvPaymentFindUniqueArgs
  ): Promise<WedInvPayment | null> {
    const result = await this.service.wedInvPayment(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => WedInvPayment)
  @nestAccessControl.UseRoles({
    resource: "WedInvPayment",
    action: "create",
    possession: "any",
  })
  async createWedInvPayment(
    @graphql.Args() args: CreateWedInvPaymentArgs
  ): Promise<WedInvPayment> {
    return await this.service.createWedInvPayment({
      ...args,
      data: {
        ...args.data,

        dtPaymentMethod: args.data.dtPaymentMethod
          ? {
              connect: args.data.dtPaymentMethod,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,

        wedInv: args.data.wedInv
          ? {
              connect: args.data.wedInv,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => WedInvPayment)
  @nestAccessControl.UseRoles({
    resource: "WedInvPayment",
    action: "update",
    possession: "any",
  })
  async updateWedInvPayment(
    @graphql.Args() args: UpdateWedInvPaymentArgs
  ): Promise<WedInvPayment | null> {
    try {
      return await this.service.updateWedInvPayment({
        ...args,
        data: {
          ...args.data,

          dtPaymentMethod: args.data.dtPaymentMethod
            ? {
                connect: args.data.dtPaymentMethod,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,

          wedInv: args.data.wedInv
            ? {
                connect: args.data.wedInv,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => WedInvPayment)
  @nestAccessControl.UseRoles({
    resource: "WedInvPayment",
    action: "delete",
    possession: "any",
  })
  async deleteWedInvPayment(
    @graphql.Args() args: DeleteWedInvPaymentArgs
  ): Promise<WedInvPayment | null> {
    try {
      return await this.service.deleteWedInvPayment(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => WedInvPayment)
  async uploadEvidence(
    @graphql.Args({
      name: "file",
      type: () => GraphQLUpload,
    })
    file: FileUpload,
    @graphql.Args()
    args: WedInvPaymentFindUniqueArgs
  ): Promise<WedInvPayment> {
    return await this.service.uploadEvidence(args, file);
  }

  @graphql.Mutation(() => WedInvPayment)
  async deleteEvidence(
    @graphql.Args()
    args: WedInvPaymentFindUniqueArgs
  ): Promise<WedInvPayment> {
    return await this.service.deleteEvidence(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => DtPaymentMethod, {
    nullable: true,
    name: "dtPaymentMethod",
  })
  @nestAccessControl.UseRoles({
    resource: "DtPaymentMethod",
    action: "read",
    possession: "any",
  })
  async getDtPaymentMethod(
    @graphql.Parent() parent: WedInvPayment
  ): Promise<DtPaymentMethod | null> {
    const result = await this.service.getDtPaymentMethod(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: WedInvPayment): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @Public()
  @graphql.ResolveField(() => WedInv, {
    nullable: true,
    name: "wedInv",
  })
  async getWedInv(
    @graphql.Parent() parent: WedInvPayment
  ): Promise<WedInv | null> {
    const result = await this.service.getWedInv(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
