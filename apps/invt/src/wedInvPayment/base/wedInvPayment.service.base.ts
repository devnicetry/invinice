/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  WedInvPayment as PrismaWedInvPayment,
  DtPaymentMethod as PrismaDtPaymentMethod,
  User as PrismaUser,
  WedInv as PrismaWedInv,
} from "@prisma/client";

import { LocalStorageService } from "src/storage/providers/local/local.storage.service";
import { InputJsonValue } from "src/types";
import { FileDownload, FileUpload } from "src/storage/base/storage.types";
import { LocalStorageFile } from "src/storage/providers/local/local.storage.types";

export class WedInvPaymentServiceBase {
  constructor(
    protected readonly prisma: PrismaService,
    protected readonly localStorageService: LocalStorageService
  ) {}

  async count(
    args: Omit<Prisma.WedInvPaymentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.wedInvPayment.count(args);
  }

  async wedInvPayments<T extends Prisma.WedInvPaymentFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvPaymentFindManyArgs>
  ): Promise<PrismaWedInvPayment[]> {
    return this.prisma.wedInvPayment.findMany<Prisma.WedInvPaymentFindManyArgs>(
      args
    );
  }
  async wedInvPayment<T extends Prisma.WedInvPaymentFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvPaymentFindUniqueArgs>
  ): Promise<PrismaWedInvPayment | null> {
    return this.prisma.wedInvPayment.findUnique(args);
  }
  async createWedInvPayment<T extends Prisma.WedInvPaymentCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvPaymentCreateArgs>
  ): Promise<PrismaWedInvPayment> {
    return this.prisma.wedInvPayment.create<T>(args);
  }
  async updateWedInvPayment<T extends Prisma.WedInvPaymentUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvPaymentUpdateArgs>
  ): Promise<PrismaWedInvPayment> {
    return this.prisma.wedInvPayment.update<T>(args);
  }
  async deleteWedInvPayment<T extends Prisma.WedInvPaymentDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvPaymentDeleteArgs>
  ): Promise<PrismaWedInvPayment> {
    return this.prisma.wedInvPayment.delete(args);
  }

  async uploadEvidence<T extends Prisma.WedInvPaymentFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvPaymentFindUniqueArgs>,
    file: FileUpload
  ): Promise<PrismaWedInvPayment> {
    file.filename = `profilePicture-${args.where.id}.${file.filename
      .split(".")
      .pop()}`;
    const containerPath = "/Wed Inv/Payments";
    const evidence = await this.localStorageService.uploadFile(
      file,
      [],
      10000000,
      containerPath
    );

    return await this.prisma.wedInvPayment.update({
      where: args.where,

      data: {
        evidence: evidence as InputJsonValue,
      },
    });
  }

  async downloadEvidence<T extends Prisma.WedInvPaymentFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvPaymentFindUniqueArgs>
  ): Promise<FileDownload> {
    const { evidence } = await this.prisma.wedInvPayment.findUniqueOrThrow({
      where: args.where,
    });

    return await this.localStorageService.downloadFile(
      evidence as unknown as LocalStorageFile
    );
  }

  async deleteEvidence<T extends Prisma.WedInvPaymentFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvPaymentFindUniqueArgs>
  ): Promise<PrismaWedInvPayment> {
    const { evidence } = await this.prisma.wedInvPayment.findUniqueOrThrow({
      where: args.where,
    });

    await this.localStorageService.deleteFile(
      evidence as unknown as LocalStorageFile
    );

    return await this.prisma.wedInvPayment.update({
      where: args.where,

      data: {
        evidence: Prisma.DbNull,
      },
    });
  }

  async getDtPaymentMethod(
    parentId: string
  ): Promise<PrismaDtPaymentMethod | null> {
    return this.prisma.wedInvPayment
      .findUnique({
        where: { id: parentId },
      })
      .dtPaymentMethod();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.wedInvPayment
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }

  async getWedInv(parentId: string): Promise<PrismaWedInv | null> {
    return this.prisma.wedInvPayment
      .findUnique({
        where: { id: parentId },
      })
      .wedInv();
  }
}
