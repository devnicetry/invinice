/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Public } from "../../decorators/public.decorator";
import { WedInvShare } from "./WedInvShare";
import { WedInvShareCountArgs } from "./WedInvShareCountArgs";
import { WedInvShareFindManyArgs } from "./WedInvShareFindManyArgs";
import { WedInvShareFindUniqueArgs } from "./WedInvShareFindUniqueArgs";
import { CreateWedInvShareArgs } from "./CreateWedInvShareArgs";
import { UpdateWedInvShareArgs } from "./UpdateWedInvShareArgs";
import { DeleteWedInvShareArgs } from "./DeleteWedInvShareArgs";
import { WedInvCommentFindManyArgs } from "../../wedInvComment/base/WedInvCommentFindManyArgs";
import { WedInvComment } from "../../wedInvComment/base/WedInvComment";
import { WedInv } from "../../wedInv/base/WedInv";
import { WedInvShareService } from "../wedInvShare.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => WedInvShare)
export class WedInvShareResolverBase {
  constructor(
    protected readonly service: WedInvShareService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "WedInvShare",
    action: "read",
    possession: "any",
  })
  async _wedInvSharesMeta(
    @graphql.Args() args: WedInvShareCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [WedInvShare])
  @nestAccessControl.UseRoles({
    resource: "WedInvShare",
    action: "read",
    possession: "any",
  })
  async wedInvShares(
    @graphql.Args() args: WedInvShareFindManyArgs
  ): Promise<WedInvShare[]> {
    return this.service.wedInvShares(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => WedInvShare, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "WedInvShare",
    action: "read",
    possession: "own",
  })
  async wedInvShare(
    @graphql.Args() args: WedInvShareFindUniqueArgs
  ): Promise<WedInvShare | null> {
    const result = await this.service.wedInvShare(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => WedInvShare)
  @nestAccessControl.UseRoles({
    resource: "WedInvShare",
    action: "create",
    possession: "any",
  })
  async createWedInvShare(
    @graphql.Args() args: CreateWedInvShareArgs
  ): Promise<WedInvShare> {
    return await this.service.createWedInvShare({
      ...args,
      data: {
        ...args.data,

        wedInv: args.data.wedInv
          ? {
              connect: args.data.wedInv,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => WedInvShare)
  @nestAccessControl.UseRoles({
    resource: "WedInvShare",
    action: "update",
    possession: "any",
  })
  async updateWedInvShare(
    @graphql.Args() args: UpdateWedInvShareArgs
  ): Promise<WedInvShare | null> {
    try {
      return await this.service.updateWedInvShare({
        ...args,
        data: {
          ...args.data,

          wedInv: args.data.wedInv
            ? {
                connect: args.data.wedInv,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => WedInvShare)
  @nestAccessControl.UseRoles({
    resource: "WedInvShare",
    action: "delete",
    possession: "any",
  })
  async deleteWedInvShare(
    @graphql.Args() args: DeleteWedInvShareArgs
  ): Promise<WedInvShare | null> {
    try {
      return await this.service.deleteWedInvShare(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [WedInvComment], { name: "wedInvComments" })
  @nestAccessControl.UseRoles({
    resource: "WedInvComment",
    action: "read",
    possession: "any",
  })
  async findWedInvComments(
    @graphql.Parent() parent: WedInvShare,
    @graphql.Args() args: WedInvCommentFindManyArgs
  ): Promise<WedInvComment[]> {
    const results = await this.service.findWedInvComments(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @Public()
  @graphql.ResolveField(() => WedInv, {
    nullable: true,
    name: "wedInv",
  })
  async getWedInv(
    @graphql.Parent() parent: WedInvShare
  ): Promise<WedInv | null> {
    const result = await this.service.getWedInv(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
