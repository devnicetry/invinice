/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  WedInvShare as PrismaWedInvShare,
  WedInvComment as PrismaWedInvComment,
  WedInv as PrismaWedInv,
} from "@prisma/client";

export class WedInvShareServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.WedInvShareCountArgs, "select">
  ): Promise<number> {
    return this.prisma.wedInvShare.count(args);
  }

  async wedInvShares<T extends Prisma.WedInvShareFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvShareFindManyArgs>
  ): Promise<PrismaWedInvShare[]> {
    return this.prisma.wedInvShare.findMany<Prisma.WedInvShareFindManyArgs>(
      args
    );
  }
  async wedInvShare<T extends Prisma.WedInvShareFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvShareFindUniqueArgs>
  ): Promise<PrismaWedInvShare | null> {
    return this.prisma.wedInvShare.findUnique(args);
  }
  async createWedInvShare<T extends Prisma.WedInvShareCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvShareCreateArgs>
  ): Promise<PrismaWedInvShare> {
    return this.prisma.wedInvShare.create<T>(args);
  }
  async updateWedInvShare<T extends Prisma.WedInvShareUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvShareUpdateArgs>
  ): Promise<PrismaWedInvShare> {
    return this.prisma.wedInvShare.update<T>(args);
  }
  async deleteWedInvShare<T extends Prisma.WedInvShareDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvShareDeleteArgs>
  ): Promise<PrismaWedInvShare> {
    return this.prisma.wedInvShare.delete(args);
  }

  async findWedInvComments(
    parentId: string,
    args: Prisma.WedInvCommentFindManyArgs
  ): Promise<PrismaWedInvComment[]> {
    return this.prisma.wedInvShare
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .wedInvComments(args);
  }

  async getWedInv(parentId: string): Promise<PrismaWedInv | null> {
    return this.prisma.wedInvShare
      .findUnique({
        where: { id: parentId },
      })
      .wedInv();
  }
}
