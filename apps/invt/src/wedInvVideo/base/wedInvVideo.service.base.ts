/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  WedInvVideo as PrismaWedInvVideo,
  WedInv as PrismaWedInv,
} from "@prisma/client";
import { LocalStorageService } from "src/storage/providers/local/local.storage.service";
import { InputJsonValue } from "src/types";
import { FileDownload, FileUpload } from "src/storage/base/storage.types";
import { LocalStorageFile } from "src/storage/providers/local/local.storage.types";

export class WedInvVideoServiceBase {
  constructor(
    protected readonly prisma: PrismaService,
    protected readonly localStorageService: LocalStorageService
  ) {}

  async count(
    args: Omit<Prisma.WedInvVideoCountArgs, "select">
  ): Promise<number> {
    return this.prisma.wedInvVideo.count(args);
  }

  async wedInvVideos<T extends Prisma.WedInvVideoFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvVideoFindManyArgs>
  ): Promise<PrismaWedInvVideo[]> {
    return this.prisma.wedInvVideo.findMany<Prisma.WedInvVideoFindManyArgs>(
      args
    );
  }
  async wedInvVideo<T extends Prisma.WedInvVideoFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvVideoFindUniqueArgs>
  ): Promise<PrismaWedInvVideo | null> {
    return this.prisma.wedInvVideo.findUnique(args);
  }
  async createWedInvVideo<T extends Prisma.WedInvVideoCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvVideoCreateArgs>
  ): Promise<PrismaWedInvVideo> {
    return this.prisma.wedInvVideo.create<T>(args);
  }
  async updateWedInvVideo<T extends Prisma.WedInvVideoUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvVideoUpdateArgs>
  ): Promise<PrismaWedInvVideo> {
    return this.prisma.wedInvVideo.update<T>(args);
  }
  async deleteWedInvVideo<T extends Prisma.WedInvVideoDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvVideoDeleteArgs>
  ): Promise<PrismaWedInvVideo> {
    return this.prisma.wedInvVideo.delete(args);
  }

  async uploadVideo<T extends Prisma.WedInvVideoFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvVideoFindUniqueArgs>,
    file: FileUpload
  ): Promise<PrismaWedInvVideo> {
    file.filename = `profilePicture-${args.where.id}.${file.filename
      .split(".")
      .pop()}`;
    const containerPath = "/Wed Inv/Video/";
    const video = await this.localStorageService.uploadFile(
      file,
      [],
      100000000,
      containerPath
    );

    return await this.prisma.wedInvVideo.update({
      where: args.where,

      data: {
        video: video as InputJsonValue,
      },
    });
  }

  async downloadVideo<T extends Prisma.WedInvVideoFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvVideoFindUniqueArgs>
  ): Promise<FileDownload> {
    const { video } = await this.prisma.wedInvVideo.findUniqueOrThrow({
      where: args.where,
    });

    return await this.localStorageService.downloadFile(
      video as unknown as LocalStorageFile
    );
  }

  async deleteVideo<T extends Prisma.WedInvVideoFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.WedInvVideoFindUniqueArgs>
  ): Promise<PrismaWedInvVideo> {
    const { video } = await this.prisma.wedInvVideo.findUniqueOrThrow({
      where: args.where,
    });

    await this.localStorageService.deleteFile(
      video as unknown as LocalStorageFile
    );

    return await this.prisma.wedInvVideo.update({
      where: args.where,

      data: {
        video: Prisma.DbNull,
      },
    });
  }

  async getWedInv(parentId: string): Promise<PrismaWedInv | null> {
    return this.prisma.wedInvVideo
      .findUnique({
        where: { id: parentId },
      })
      .wedInv();
  }
}
