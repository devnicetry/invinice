/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request, Response } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { FileInterceptor } from "@nestjs/platform-express";
import { WedInvVideoService } from "../wedInvVideo.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { WedInvVideoCreateInput } from "./WedInvVideoCreateInput";
import { WedInvVideo } from "./WedInvVideo";
import { WedInvVideoFindManyArgs } from "./WedInvVideoFindManyArgs";
import { WedInvVideoWhereUniqueInput } from "./WedInvVideoWhereUniqueInput";
import { WedInvVideoUpdateInput } from "./WedInvVideoUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class WedInvVideoControllerBase {
  constructor(
    protected readonly service: WedInvVideoService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: WedInvVideo })
  @nestAccessControl.UseRoles({
    resource: "WedInvVideo",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: WedInvVideoCreateInput,
  })
  async createWedInvVideo(
    @common.Body() data: WedInvVideoCreateInput
  ): Promise<WedInvVideo> {
    return await this.service.createWedInvVideo({
      data: {
        ...data,

        wedInv: data.wedInv
          ? {
              connect: data.wedInv,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
        video: true,

        wedInv: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [WedInvVideo] })
  @ApiNestedQuery(WedInvVideoFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "WedInvVideo",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async wedInvVideos(@common.Req() request: Request): Promise<WedInvVideo[]> {
    const args = plainToClass(WedInvVideoFindManyArgs, request.query);
    return this.service.wedInvVideos({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
        video: true,

        wedInv: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: WedInvVideo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "WedInvVideo",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async wedInvVideo(
    @common.Param() params: WedInvVideoWhereUniqueInput
  ): Promise<WedInvVideo | null> {
    const result = await this.service.wedInvVideo({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
        video: true,

        wedInv: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: WedInvVideo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "WedInvVideo",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: WedInvVideoUpdateInput,
  })
  async updateWedInvVideo(
    @common.Param() params: WedInvVideoWhereUniqueInput,
    @common.Body() data: WedInvVideoUpdateInput
  ): Promise<WedInvVideo | null> {
    try {
      return await this.service.updateWedInvVideo({
        where: params,
        data: {
          ...data,

          wedInv: data.wedInv
            ? {
                connect: data.wedInv,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
          video: true,

          wedInv: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: WedInvVideo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "WedInvVideo",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteWedInvVideo(
    @common.Param() params: WedInvVideoWhereUniqueInput
  ): Promise<WedInvVideo | null> {
    try {
      return await this.service.deleteWedInvVideo({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
          video: true,

          wedInv: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Put(":id/video")
  @common.UseInterceptors(FileInterceptor("file"))
  @swagger.ApiConsumes("multipart/form-data")
  @swagger.ApiBody({
    schema: {
      type: "object",

      properties: {
        file: {
          type: "string",
          format: "binary",
        },
      },
    },
  })
  @swagger.ApiParam({
    name: "id",
    type: "string",
    required: true,
  })
  @swagger.ApiCreatedResponse({
    type: WedInvVideo,
    status: "2XX",
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  async uploadVideo(
    @common.Param()
    params: WedInvVideoWhereUniqueInput,
    @common.UploadedFile()
    file: Express.Multer.File
  ): Promise<WedInvVideo> {
    return this.service.uploadVideo(
      {
        where: params,
      },
      Object.assign(file, {
        filename: file.originalname,
      })
    );
  }

  @common.Get(":id/video")
  @swagger.ApiParam({
    name: "id",
    type: "string",
    required: true,
  })
  @swagger.ApiOkResponse({
    type: common.StreamableFile,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  async downloadVideo(
    @common.Param()
    params: WedInvVideoWhereUniqueInput,
    @common.Res({
      passthrough: true,
    })
    res: Response
  ): Promise<common.StreamableFile> {
    const result = await this.service.downloadVideo({
      where: params,
    });

    if (result === null) {
      throw new errors.NotFoundException(
        "No resource was found for ",
        JSON.stringify(params)
      );
    }

    res.setHeader(
      "Content-Disposition",
      `attachment; filename=${result.filename}`
    );
    res.setHeader("Content-Type", result.mimetype);
    return result.stream;
  }

  @common.Delete(":id/video")
  @swagger.ApiOkResponse({
    type: WedInvVideo,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  async deleteVideo(
    @common.Param()
    params: WedInvVideoWhereUniqueInput
  ): Promise<WedInvVideo> {
    return this.service.deleteVideo({
      where: params,
    });
  }
}
