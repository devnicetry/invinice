/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { GraphQLUpload } from "graphql-upload";
import { FileUpload } from "src/storage/base/storage.types";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Public } from "../../decorators/public.decorator";
import { WedInvVideo } from "./WedInvVideo";
import { WedInvVideoCountArgs } from "./WedInvVideoCountArgs";
import { WedInvVideoFindManyArgs } from "./WedInvVideoFindManyArgs";
import { WedInvVideoFindUniqueArgs } from "./WedInvVideoFindUniqueArgs";
import { CreateWedInvVideoArgs } from "./CreateWedInvVideoArgs";
import { UpdateWedInvVideoArgs } from "./UpdateWedInvVideoArgs";
import { DeleteWedInvVideoArgs } from "./DeleteWedInvVideoArgs";
import { WedInv } from "../../wedInv/base/WedInv";
import { WedInvVideoService } from "../wedInvVideo.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => WedInvVideo)
export class WedInvVideoResolverBase {
  constructor(
    protected readonly service: WedInvVideoService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "WedInvVideo",
    action: "read",
    possession: "any",
  })
  async _wedInvVideosMeta(
    @graphql.Args() args: WedInvVideoCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [WedInvVideo])
  @nestAccessControl.UseRoles({
    resource: "WedInvVideo",
    action: "read",
    possession: "any",
  })
  async wedInvVideos(
    @graphql.Args() args: WedInvVideoFindManyArgs
  ): Promise<WedInvVideo[]> {
    return this.service.wedInvVideos(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => WedInvVideo, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "WedInvVideo",
    action: "read",
    possession: "own",
  })
  async wedInvVideo(
    @graphql.Args() args: WedInvVideoFindUniqueArgs
  ): Promise<WedInvVideo | null> {
    const result = await this.service.wedInvVideo(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => WedInvVideo)
  @nestAccessControl.UseRoles({
    resource: "WedInvVideo",
    action: "create",
    possession: "any",
  })
  async createWedInvVideo(
    @graphql.Args() args: CreateWedInvVideoArgs
  ): Promise<WedInvVideo> {
    return await this.service.createWedInvVideo({
      ...args,
      data: {
        ...args.data,

        wedInv: args.data.wedInv
          ? {
              connect: args.data.wedInv,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => WedInvVideo)
  @nestAccessControl.UseRoles({
    resource: "WedInvVideo",
    action: "update",
    possession: "any",
  })
  async updateWedInvVideo(
    @graphql.Args() args: UpdateWedInvVideoArgs
  ): Promise<WedInvVideo | null> {
    try {
      return await this.service.updateWedInvVideo({
        ...args,
        data: {
          ...args.data,

          wedInv: args.data.wedInv
            ? {
                connect: args.data.wedInv,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => WedInvVideo)
  @nestAccessControl.UseRoles({
    resource: "WedInvVideo",
    action: "delete",
    possession: "any",
  })
  async deleteWedInvVideo(
    @graphql.Args() args: DeleteWedInvVideoArgs
  ): Promise<WedInvVideo | null> {
    try {
      return await this.service.deleteWedInvVideo(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => WedInvVideo)
  async uploadVideo(
    @graphql.Args({
      name: "file",
      type: () => GraphQLUpload,
    })
    file: FileUpload,
    @graphql.Args()
    args: WedInvVideoFindUniqueArgs
  ): Promise<WedInvVideo> {
    return await this.service.uploadVideo(args, file);
  }

  @graphql.Mutation(() => WedInvVideo)
  async deleteVideo(
    @graphql.Args()
    args: WedInvVideoFindUniqueArgs
  ): Promise<WedInvVideo> {
    return await this.service.deleteVideo(args);
  }

  @Public()
  @graphql.ResolveField(() => WedInv, {
    nullable: true,
    name: "wedInv",
  })
  async getWedInv(
    @graphql.Parent() parent: WedInvVideo
  ): Promise<WedInv | null> {
    const result = await this.service.getWedInv(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
