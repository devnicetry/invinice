/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { GraphQLUpload } from "graphql-upload";
import { FileUpload } from "src/storage/base/storage.types";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Public } from "../../decorators/public.decorator";
import { WedInvGallery } from "./WedInvGallery";
import { WedInvGalleryCountArgs } from "./WedInvGalleryCountArgs";
import { WedInvGalleryFindManyArgs } from "./WedInvGalleryFindManyArgs";
import { WedInvGalleryFindUniqueArgs } from "./WedInvGalleryFindUniqueArgs";
import { CreateWedInvGalleryArgs } from "./CreateWedInvGalleryArgs";
import { UpdateWedInvGalleryArgs } from "./UpdateWedInvGalleryArgs";
import { DeleteWedInvGalleryArgs } from "./DeleteWedInvGalleryArgs";
import { WedInv } from "../../wedInv/base/WedInv";
import { WedInvGalleryService } from "../wedInvGallery.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => WedInvGallery)
export class WedInvGalleryResolverBase {
  constructor(
    protected readonly service: WedInvGalleryService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "WedInvGallery",
    action: "read",
    possession: "any",
  })
  async _wedInvGalleriesMeta(
    @graphql.Args() args: WedInvGalleryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [WedInvGallery])
  @nestAccessControl.UseRoles({
    resource: "WedInvGallery",
    action: "read",
    possession: "any",
  })
  async wedInvGalleries(
    @graphql.Args() args: WedInvGalleryFindManyArgs
  ): Promise<WedInvGallery[]> {
    return this.service.wedInvGalleries(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => WedInvGallery, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "WedInvGallery",
    action: "read",
    possession: "own",
  })
  async wedInvGallery(
    @graphql.Args() args: WedInvGalleryFindUniqueArgs
  ): Promise<WedInvGallery | null> {
    const result = await this.service.wedInvGallery(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => WedInvGallery)
  @nestAccessControl.UseRoles({
    resource: "WedInvGallery",
    action: "create",
    possession: "any",
  })
  async createWedInvGallery(
    @graphql.Args() args: CreateWedInvGalleryArgs
  ): Promise<WedInvGallery> {
    return await this.service.createWedInvGallery({
      ...args,
      data: {
        ...args.data,

        wedInv: args.data.wedInv
          ? {
              connect: args.data.wedInv,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => WedInvGallery)
  @nestAccessControl.UseRoles({
    resource: "WedInvGallery",
    action: "update",
    possession: "any",
  })
  async updateWedInvGallery(
    @graphql.Args() args: UpdateWedInvGalleryArgs
  ): Promise<WedInvGallery | null> {
    try {
      return await this.service.updateWedInvGallery({
        ...args,
        data: {
          ...args.data,

          wedInv: args.data.wedInv
            ? {
                connect: args.data.wedInv,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => WedInvGallery)
  @nestAccessControl.UseRoles({
    resource: "WedInvGallery",
    action: "delete",
    possession: "any",
  })
  async deleteWedInvGallery(
    @graphql.Args() args: DeleteWedInvGalleryArgs
  ): Promise<WedInvGallery | null> {
    try {
      return await this.service.deleteWedInvGallery(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => WedInvGallery)
  async uploadPhoto(
    @graphql.Args({
      name: "file",
      type: () => GraphQLUpload,
    })
    file: FileUpload,
    @graphql.Args()
    args: WedInvGalleryFindUniqueArgs
  ): Promise<WedInvGallery> {
    return await this.service.uploadPhoto(args, file);
  }

  @graphql.Mutation(() => WedInvGallery)
  async deletePhoto(
    @graphql.Args()
    args: WedInvGalleryFindUniqueArgs
  ): Promise<WedInvGallery> {
    return await this.service.deletePhoto(args);
  }

  @Public()
  @graphql.ResolveField(() => WedInv, {
    nullable: true,
    name: "wedInv",
  })
  async getWedInv(
    @graphql.Parent() parent: WedInvGallery
  ): Promise<WedInv | null> {
    const result = await this.service.getWedInv(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
