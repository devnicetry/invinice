datasource db {
  provider = "mongodb"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  createdAt      DateTime        @default(now())
  email          String?         @unique
  fullName       String?
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  password       String
  roles          Json
  status         EnumUserStatus?
  updatedAt      DateTime        @updatedAt
  username       String          @unique
  wedInvPayments WedInvPayment[]
  wedInvs        WedInv[]
}

model WedInv {
  createdAt       DateTime          @default(now())
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  status          EnumWedInvStatus?
  updatedAt       DateTime          @updatedAt
  url             String?
  user            User?             @relation(fields: [userId], references: [id])
  userId          String?           @db.ObjectId
  wedInvComments  WedInvComment[]
  wedInvEvents    WedInvEvent[]
  wedInvGalleries WedInvGallery[]
  wedInvGifts     WedInvGift[]
  wedInvPayments  WedInvPayment[]
  wedInvPresets   WedInvPreset[]
  wedInvShares    WedInvShare[]
  wedInvStories   WedInvStory[]
  wedInvVideos    WedInvVideo[]
  wedInvWeddings  WedInvWedding[]
}

model WedInvEvent {
  address    String?
  createdAt  DateTime             @default(now())
  date       DateTime?
  eventEnd   String?
  eventStart String?
  id         String               @id @default(auto()) @map("_id") @db.ObjectId
  maps       String?
  name       String?
  place      String?
  updatedAt  DateTime             @updatedAt
  wedInv     WedInv?              @relation(fields: [wedInvId], references: [id])
  wedInvId   String?              @db.ObjectId
  zone       EnumWedInvEventZone?
}

model WedInvStory {
  createdAt   DateTime  @default(now())
  date        DateTime?
  description String?
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String?
  photo       Json?
  updatedAt   DateTime  @updatedAt
  wedInv      WedInv?   @relation(fields: [wedInvId], references: [id])
  wedInvId    String?   @db.ObjectId
}

model WedInvGallery {
  createdAt DateTime @default(now())
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String?
  photo     Json?
  updatedAt DateTime @updatedAt
  wedInv    WedInv?  @relation(fields: [wedInvId], references: [id])
  wedInvId  String?  @db.ObjectId
}

model WedInvWedding {
  createdAt DateTime                 @default(now())
  father    String?
  gender    EnumWedInvWeddingGender?
  id        String                   @id @default(auto()) @map("_id") @db.ObjectId
  mother    String?
  name      String?
  photo     Json?
  updatedAt DateTime                 @updatedAt
  wedInv    WedInv?                  @relation(fields: [wedInvId], references: [id])
  wedInvId  String?                  @db.ObjectId
}

model DtGift {
  createdAt   DateTime            @default(now())
  giftType    EnumDtGiftGiftType?
  icon        Json?
  id          String              @id @default(auto()) @map("_id") @db.ObjectId
  name        String?
  updatedAt   DateTime            @updatedAt
  wedInvGifts WedInvGift[]
}

model WedInvGift {
  accountName  String?
  accountNo    String?
  accountPhoto Json?
  createdAt    DateTime @default(now())
  details      String?
  dtGift       DtGift?  @relation(fields: [dtGiftId], references: [id])
  dtGiftId     String?  @db.ObjectId
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  updatedAt    DateTime @updatedAt
  wedInv       WedInv?  @relation(fields: [wedInvId], references: [id])
  wedInvId     String?  @db.ObjectId
}

model WedInvShare {
  createdAt      DateTime        @default(now())
  frequency      Int?
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  identity       String?
  link           String?
  name           String?
  open           Boolean?
  updatedAt      DateTime        @updatedAt
  wedInv         WedInv?         @relation(fields: [wedInvId], references: [id])
  wedInvId       String?         @db.ObjectId
  wedInvComments WedInvComment[]
}

model WedInvComment {
  comment       String?
  confirmation  String?
  createdAt     DateTime     @default(now())
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  moment        Json?
  name          String?
  updatedAt     DateTime     @updatedAt
  wedInv        WedInv?      @relation(fields: [wedInvId], references: [id])
  wedInvId      String?      @db.ObjectId
  wedInvShare   WedInvShare? @relation(fields: [wedInvShareId], references: [id])
  wedInvShareId String?      @db.ObjectId
}

model DtPaymentMethod {
  account        String?
  accountName    String?
  accountNo      String?
  accountType    EnumDtPaymentMethodAccountType?
  createdAt      DateTime                        @default(now())
  icon           Json?
  id             String                          @id @default(auto()) @map("_id") @db.ObjectId
  updatedAt      DateTime                        @updatedAt
  wedInvPayments WedInvPayment[]
}

model WedInvPayment {
  accountName       String?
  accountNo         String?
  amount            Int?
  createdAt         DateTime         @default(now())
  dtPaymentMethod   DtPaymentMethod? @relation(fields: [dtPaymentMethodId], references: [id])
  dtPaymentMethodId String?          @db.ObjectId
  evidence          Json?
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  noRef             String?
  updatedAt         DateTime         @updatedAt
  user              User?            @relation(fields: [userId], references: [id])
  userId            String?          @db.ObjectId
  wedInv            WedInv?          @relation(fields: [wedInvId], references: [id])
  wedInvId          String?          @db.ObjectId
}

model WedInvPreset {
  createdAt DateTime @default(now())
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  updatedAt DateTime @updatedAt
  wedInv    WedInv?  @relation(fields: [wedInvId], references: [id])
  wedInvId  String?  @db.ObjectId
}

model WedInvVideo {
  createdAt DateTime @default(now())
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  updatedAt DateTime @updatedAt
  video     Json?
  wedInv    WedInv?  @relation(fields: [wedInvId], references: [id])
  wedInvId  String?  @db.ObjectId
}

enum EnumUserStatus {
  Active
  Nonactive
}

enum EnumWedInvStatus {
  Active
  Nonactive
}

enum EnumWedInvEventZone {
  Wib
  Wita
  Wit
}

enum EnumWedInvWeddingGender {
  Bride
  Groom
}

enum EnumDtGiftGiftType {
  EWallet
  BankTransfer
  Qris
  Shipping
}

enum EnumDtPaymentMethodAccountType {
  EWallet
  BankTransfer
}
